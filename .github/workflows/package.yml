name: "SMR"

on:
  workflow_dispatch:
    inputs:
      semver:
        description: "Version (e.g. v2.0.7 | 2.2.0-rc1)"
        type: string
        required: false
      patchLevel:
        description: "Select version increment/bump level"
        type: choice
        required: false
        options:
          - semver
          - patch
          - minor
        default: semver
jobs:
  update_version:
    runs-on: ubuntu-latest

    steps:

    - name: "Configure GitHub Access"
      env:
       ACCESS_TOKEN: "${{ secrets.GIT_PERSONAL_ACCESS_TOKEN }}"
      run: |
         git config --global url."https://${ACCESS_TOKEN}@github.com".insteadOf "https://github.com"
         git config --global user.email "meplato-robot@users.noreply.github.com"
         git config --global user.name "meplato-robot"
    
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: "Install Node"
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        registry-url: "https://npm.pkg.github.com"


    - name: Set input values
      run: |

       # Get the current version from package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "current version is ${CURRENT_VERSION}"
    
        # Dev-specified version and bump level (replace these with user input)
        DEV_SPECIFIED_VERSION="${{ github.event.inputs.semver }}" 
        BUMP_LEVEL="${{ github.event.inputs.patchLevel }}" 
        
        # Extract major, minor, and patch versions from the current version
        IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR="${VERSION_PARTS[0]}"
        MINOR="${VERSION_PARTS[1]}"
        PATCH="${VERSION_PARTS[2]}"
        
        # Calculate the expected dev-specified version based on bump level
        if [ "$BUMP_LEVEL" == "minor" ]; then
            EXPECTED_VERSION="$MAJOR.$((MINOR + 1)).$PATCH"
        elif [ "$BUMP_LEVEL" == "patch" ]; then
            EXPECTED_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
        else
            echo "Error: Unsupported bump-level($BUMP_LEVEL) does not match specified semantic version ($DEV_SPECIFIED_VERSION). CI fails because instructions are unclear"
            exit 1  # Exit with an error code
        fi
        
        echo "EXPECTED version is ${EXPECTED_VERSION}"
                 
        if [ "$DEV_SPECIFIED_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "Error: Specified version ($DEV_SPECIFIED_VERSION) does not match expected version ($EXPECTED_VERSION)."
            exit 1  # Exit with an error code
        fi
