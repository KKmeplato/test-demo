name: Release

on:
  workflow_dispatch:
    inputs:
      semver:
        description: "Version (e.g. v2.0.7 | 2.2.0-rc1)"
        type: string
        required: false
      patchLevel:
        description: "Select version increment/bump level"
        type: choice
        required: false
        options:
          - semver
          - patch
          - minor
        default: semver
  
jobs:
  release_semver:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'    
    steps:

      - name: "Configure GitHub Access"
        env:
          ACCESS_TOKEN: "${{ secrets.GIT_PERSONAL_ACCESS_TOKEN }}"
        run: |
          git config --global url."https://${ACCESS_TOKEN}@github.com".insteadOf "https://github.com"
          git config --global user.email "meplato-robot@users.noreply.github.com"
          git config --global user.name "meplato-robot"

# The actions/checkout action with fetch-depth: 0 fetch all tags along with the commit history.
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
             
      - name: "Install Node"
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          registry-url: "https://npm.pkg.github.com"
    
      - name: "Check Semantic Version"
        shell: sh
        run: |
        
          SEMVER_PATTERN="^(v?2)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$"
          INPUT_VERSION="${{ github.event.inputs.semver }}"
          
          if echo "${INPUT_VERSION}" | grep -E -q "$SEMVER_PATTERN"; then
            echo "Valid semantic version: ${INPUT_VERSION}"
          else
            echo "Invalid semantic version. Please provide a version that matches the pattern."
            exit 1
          fi
          
      # - name: "Update Package version"
      #   shell: bash
      #   run: |
      #     # Set the new version in package.json without creating a git tag
      #     npm --no-git-tag-version version ${{ github.event.inputs.semver }}
          
      #     # Extract version from package.json and put it in github env variable
      #     VERSION=$(node -p "require('./package.json').version")
      #      # echo "VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV
      #     # Add the updated files to the staging area
      #     git add package.json package-lock.json
          
      #     # Commit the changes with a message including the increment level
      #     git commit -m "Bump version to ${VERSION} 

      #     # Create a Git tag for the new version
      #     git tag -a ${VERSION} -m "Release ${VERSION}"
      #     # git push origin main 
      #     # git push origin --tag  
          
      #     # Push the changes and the new tag to the repository 
      #     git push origin main --follow-tags

      #     #If tag already exists, it is not allowing to create new tag.

      - name: Set the new version in package.json without creating a git tag
        shell: bash
        run: |
          npm --no-git-tag-version version ${{ github.event.inputs.semver }}
      
          # Extract version from package.json and put it in github env variable
          # VERSION=$(node -p "require('./package.json').version")

          export VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          # echo 'PKG_VERSION=$(node -p "require(\'./package.json\').version")' >> $GITHUB_ENV

          # Add the updated files to the staging area
          git add package.json package-lock.json
      
          # Commit the changes with a message including the increment level
          git commit -m "Bump version to ${VERSION}"
      
          # Create a Git tag for the new version
          git tag -a ${VERSION} -m "Release ${VERSION}"
      
          # Push the changes and the new tag to the repository 
          git push origin main --follow-tags
      

      - name: "Publish Package"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DIST_PATH: ${{ github.workspace }}/dist 
        run: |
          # npm install
          # npm run build
          cp package.json $DIST_PATH
          cp LICENSE $DIST_PATH
          cp README.md $DIST_PATH
          cd $DIST_PATH
          # HUSKY=0 npm publish $DIST_PATH
          zip -r package.zip ./*
   
      - name: "Release Package"
      # Alternative github action for releasing package 
      # For straightforward release process and want a simple setup, softprops/action-gh-release is sufficient.
      # If need advanced release features, such as version bumping, changelog generation, and comprehensive release notes handling, ncipollo/release-action is good.
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.DIST_PATH }}/package.zip
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.VERSION }}
          generateReleaseNotes: true
