# name: Push with semantic release

# on:
#   workflow_dispatch:
#     inputs:
#       semver:
#         description: "Semantic version to deploy (v2.0.7)"
#         type: string
#         required: true
#       choice:
#         description: 'Enter the patch version'
#         type: choice
#         required: false
#         options:
#           - patch
# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:

#       - name: "Configure GitHub Access"
#         env:
#           ACCESS_TOKEN: "${{ secrets.GIT_PERSONAL_ACCESS_TOKEN }}"
#         run: |
#           git config --global url."https://${ACCESS_TOKEN}@github.com".insteadOf "https://github.com"
#           # git config --global user.email "meplato-robot@users.noreply.github.com"
#           git config --global user.name "meplato-robot"

#       - name: "Checkout"
#         uses: actions/checkout@v4

#       - name: "Install Node"
#         uses: actions/setup-node@v4
#         with:
#           node-version: 18.x
      
#       - name: Update package version and create tag
#         run: |
#          # Set the new version in package.json without creating a git tag
#           npm --no-git-tag-version version ${{ github.event.inputs.semver }}

#           # Get the updated version from package.json
#           VERSION=$(node -p "require('./package.json').version")

#           # Add the updated files to the staging area
#           git add package.json package-lock.json

#           # Commit the changes with a meaningful message
#           git commit -m "Bump version to ${VERSION} [skip ci]"

#           # Push the changes to the "v2" branch
#           git push origin v2

#           # Create a Git tag for the new version
#           git tag ${VERSION}

#           # Push the changes and the new tag to the repository
#           git push origin --tags
    



name: Combined Workflow

on:
  push:
    tags:
      - "v2.[0-9]+.[0-9]+"
      - "v2.[0-9]+.[0-9]+-rc[0-9]+"
      - "v2.[0-9]+.[0-9]+-[a-z][0-9]+"
  workflow_dispatch:
    inputs:
      semver:
        description: "Semantic version to deploy (v2.0.7)"
        type: string
        required: true
      choice:
        description: 'Enter the patch version'
        type: choice
        required: false
        options:
          - patch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

      - name: "Configure GitHub Access"
        env:
          ACCESS_TOKEN: "${{ secrets.GIT_PERSONAL_ACCESS_TOKEN }}"
        run: |
          git config --global url."https://${ACCESS_TOKEN}@github.com".insteadOf "https://github.com"
          # git config --global user.email "meplato-robot@users.noreply.github.com"
          git config --global user.name "meplato-robot"

      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Install Node"
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: Update package version
        run: |
          # Set the new version in package.json without creating a git tag
          npm --no-git-tag-version version ${{ github.event.inputs.semver }}
          # Get the updated version from package.json
          VERSION=$(node -p "require('./package.json').version")
          # Add the updated files to the staging area
          git add package.json package-lock.json
          # Commit the changes with a meaningful message
          git commit -m "Bump version to ${VERSION} [skip ci]"
          # Create a Git tag for the new version
          git tag ${VERSION}
          # Push the changes and the new tag to the repository
          git push origin --tag
          
          # Fetch the "v2" branch from the remote repository
          git fetch origin v2
          # Switch to the existing "v2" branch
          git checkout v2
          # Push the changes to the "v2" branch
          git push origin v2

         

      - name: "Publish Package"
        run: |
          if [ ${GITHUB_REF/refs\/tags\/v/} = $(jq -r '.version' <package.json) ]; then
            echo "Versions match. All Good."
          else
            echo "Versions do not match."
            echo "TAG=${GITHUB_REF/refs\/tags\/v/}"
            echo "PKG=$(jq -r '.version' <package.json)"
            exit 1
          fi
          npm install
          npm run build
          cp package.json ./dist
          cp LICENSE ./dist
          cp README.md ./dist
          cd ./dist
          HUSKY=0 npm publish ./dist
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - uses: ncipollo/release-action@v1
        with:
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}

